using System;
using UnityEngine;

internal class SoaringGenerateUserModule : SoaringModule
{
	public override string ModuleName()
	{
		return "retrieveNextAutogeneratedUserTag";
	}

	public override void CallModule(SoaringDictionary data, SoaringDictionary callData, SoaringContext context)
	{
		SoaringDictionary data2 = SCQueueTools.CreateMessage(ModuleName(), data.soaringValue("gameId"), null);
		PushCorePostDataToQueue(data2, 0, context, true);
	}

	protected override bool Web_Callback(SCWebQueue.SCWebQueueState state, SoaringError error, object userData, object data)
	{
		if (state == SCWebQueue.SCWebQueueState.Updated)
		{
			return true;
		}
		SoaringModuleData soaringModuleData = CreateModuleData();
		try
		{
			SoaringDictionary parsed_data = null;
			if (error == null)
			{
				error = SCQueueTools.CheckAndHandleError((string)data, ref parsed_data);
				if (error != null || parsed_data == null)
				{
					state = SCWebQueue.SCWebQueueState.Failed;
				}
				else
				{
					parsed_data = DecryptCall(parsed_data);
				}
			}
			SoaringDebug.Log((string)data);
			switch (state)
			{
			case SCWebQueue.SCWebQueueState.Finished:
			{
				parsed_data = (SoaringDictionary)parsed_data.objectWithKey("data");
				SoaringDictionary soaringDictionary = new SoaringDictionary();
				soaringDictionary.addValue(parsed_data.objectWithKey("nextTag"), "nextTag");
				SoaringInternal.instance.UpdatePlayerData(soaringDictionary, true);
				HandleDelegateCallback(soaringModuleData.Set(true, null, parsed_data, (SoaringContext)userData));
				break;
			}
			case SCWebQueue.SCWebQueueState.Failed:
				HandleDelegateCallback(soaringModuleData.Set(false, error, null, (SoaringContext)userData));
				break;
			}
		}
		catch (Exception ex)
		{
			SoaringDebug.Log("SoaringModule:" + ModuleName() + ": Error: " + ex.Message, LogType.Warning);
			state = SCWebQueue.SCWebQueueState.Failed;
			HandleDelegateCallback(soaringModuleData.Set(false, ex.Message, null, (SoaringContext)userData));
		}
		ReturnModuledata(soaringModuleData);
		return state == SCWebQueue.SCWebQueueState.Finished;
	}

	public override void HandleDelegateCallback(SoaringModuleData moduleData)
	{
		string text = null;
		string text2 = null;
		string platformID = null;
		SoaringLoginType type = SoaringLoginType.Soaring;
		if (moduleData.data != null)
		{
			text2 = moduleData.data.soaringValue("nextTag");
			if (moduleData.context != null)
			{
				SoaringDictionary soaringDictionary = (SoaringDictionary)moduleData.context.objectWithKey("tregister");
				if (soaringDictionary != null)
				{
					int num = soaringDictionary.soaringValue("loginType");
					type = (SoaringLoginType)num;
					text = soaringDictionary.soaringValue("password");
					string key = SoaringInternal.instance.PlatformKeyWithLoginType(type, true);
					platformID = soaringDictionary.soaringValue(key);
				}
			}
		}
		if (string.IsNullOrEmpty(text))
		{
			SoaringInternal.Delegate.OnGenerateUserName(moduleData.state, moduleData.error, text2, moduleData.context);
		}
		else if (moduleData.state)
		{
			SoaringInternal.instance.RegisterUser(text2, text, platformID, true, type, true, moduleData.context);
		}
		else
		{
			SoaringInternal.instance.HandleLogin(SoaringLoginType.Soaring, moduleData.state, moduleData.error, moduleData.data, moduleData.context);
		}
	}
}
